#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_SIZE 5

// https://youtu.be/oyX30WVuEos
// used this youtube video and
// chatgpt to help me apply
// the queue strucutre to
// a string datatype

typedef struct {
  char **values;
  int head, tail, size, num_entries;
} queue;

void init_queue(queue *q) {
  q->size = MAX_SIZE;
  q->values = malloc(sizeof(char *) * q->size);
  q->head = 0;
  q->tail = 0;
  q->num_entries = 0;
}

bool queue_empty(queue *q) { return (q->num_entries == 0); }

bool queue_full(queue *q) { return (q->num_entries == q->size); }

void destory(queue *q) {
  for (int i = 0; i < q->size; i++) {
    free(q->values[i]);
  }
  free(q->values);
}

char *dequeue(queue *q) {
  if (queue_empty(q)) {
    return NULL;
  }

  char *result;

  result = q->values[q->head];
  q->head = (q->head + 1) % q->size;
  q->num_entries--;

  return result;
}

void enqueue(queue *q, const char *value) {
  if (queue_full(q)) {
    // get rid of oldest entry
    dequeue(q);
  }
  q->values[q->tail] = value;
  q->values[q->tail][31] = '\0';
  q->tail = (q->tail + 1) % q->size;
  q->num_entries++;
}

int main() {
  queue q1;
  char buf[32];

  init_queue(&q1);
  while (1) {
    printf("enter input: ");
    fgets(buf, sizeof(buf), stdin);
    buf[strcspn(buf, "\n")] = '\0';

    enqueue(&q1, buf);

    if (strcmp(buf, "print") == 0) {
      break;
    }
  }
  for (int i = 0; i < q1.size; i++) {
    char *res = dequeue(&q1);
    if (res) {
      printf("%s\n", res);
    }
  }

  destory(&q1);
  return 0;
}
